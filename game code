import pygame
import random
import os
import winsound

# Initialize pygame
pygame.init()

# Game Constants
WIDTH, HEIGHT = 600, 400
GRID_SIZE = 10  # Adjusted for better resolution
WHITE = (255, 255, 255)
GREEN = (34, 139, 34)
DARK_GREEN = (0, 100, 0)
RED = (255, 0, 0)
BLACK = (0, 0, 0)
EYE_COLOR = (255, 255, 255)
SNAKE_SPEED = 10

# Directions
UP = (0, -GRID_SIZE)
DOWN = (0, GRID_SIZE)
LEFT = (-GRID_SIZE, 0)
RIGHT = (GRID_SIZE, 0)

# Initialize screen
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Snake Game")
clock = pygame.time.Clock()

# Load background music
if os.path.exists("bg_music.mp3"):
    pygame.mixer.music.load("bg_music.mp3")
    pygame.mixer.music.play(-1)
else:
    print("Warning: 'bg_music.mp3' not found! No background music.")

# Load sounds
if os.path.exists("eat.wav"):
    eat_sound = pygame.mixer.Sound("eat.wav")
else:
    eat_sound = None

if os.path.exists("game_over.wav"):
    game_over_sound = pygame.mixer.Sound("game_over.wav")
else:
    game_over_sound = None

class Snake:
    def __init__(self):
        self.body = [(100, 100), (90, 100), (80, 100)]
        self.direction = RIGHT

    def move(self):
        head_x, head_y = self.body[0]
        new_head = (head_x + self.direction[0], head_y + self.direction[1])
        new_head = (new_head[0] % WIDTH, new_head[1] % HEIGHT)
        self.body.insert(0, new_head)
        self.body.pop()

    def grow(self):
        self.body.append(self.body[-1])

    def check_collision(self):
        return self.body[0] in self.body[1:]

    def draw(self):
        for i, segment in enumerate(self.body):
            color = DARK_GREEN if i == len(self.body) - 1 else GREEN
            pygame.draw.rect(screen, color, (*segment, GRID_SIZE, GRID_SIZE))
            pygame.draw.rect(screen, BLACK, (*segment, GRID_SIZE, GRID_SIZE), 1)
        
        head_x, head_y = self.body[0]
        eye_offset = GRID_SIZE // 4
        pygame.draw.circle(screen, EYE_COLOR, (head_x + eye_offset, head_y + eye_offset), 3)
        pygame.draw.circle(screen, EYE_COLOR, (head_x + GRID_SIZE - eye_offset, head_y + eye_offset), 3)

class Food:
    def __init__(self):
        self.position = self.random_position()
        self.value = 1  # Fixed value of 1 point
        self.color = RED  # Fixed red color for food

    def random_position(self):
        return (
            random.randint(0, (WIDTH // GRID_SIZE) - 1) * GRID_SIZE,
            random.randint(0, (HEIGHT // GRID_SIZE) - 1) * GRID_SIZE,
        )
    
    def draw(self):
        pygame.draw.rect(screen, self.color, (*self.position, GRID_SIZE, GRID_SIZE))
        pygame.draw.rect(screen, WHITE, (*self.position, GRID_SIZE, GRID_SIZE), 1)

class Game:
    def __init__(self):
        self.snake = Snake()
        self.food = Food()
        self.running = True
        self.paused = False
        self.game_over = False
        self.score = 0
        self.high_score = 0

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False

        # Use pygame.key.get_pressed to check the state of keys continuously
        keys = pygame.key.get_pressed()
        if not self.game_over:
            # Check for UP, DOWN, LEFT, RIGHT only if they are not pressed simultaneously
            if keys[pygame.K_UP] and self.snake.direction != DOWN:
                self.snake.direction = UP
            elif keys[pygame.K_DOWN] and self.snake.direction != UP:
                self.snake.direction = DOWN
            elif keys[pygame.K_LEFT] and self.snake.direction != RIGHT:
                self.snake.direction = LEFT
            elif keys[pygame.K_RIGHT] and self.snake.direction != LEFT:
                self.snake.direction = RIGHT

            # Toggle pause
            if keys[pygame.K_SPACE]:
                self.paused = not self.paused
                if self.paused:
                    pygame.mixer.music.pause()
                else:
                    pygame.mixer.music.unpause()

        if keys[pygame.K_r] and self.game_over:
            self.reset_game()
        
        if keys[pygame.K_q]:
            self.running = False  # Quit the game

    def reset_game(self):
        self.snake = Snake()
        self.food = Food()
        self.game_over = False
        self.score = 0
        pygame.mixer.music.play(-1)

    def update(self):
        if not self.paused and not self.game_over:
            self.snake.move()
            if self.snake.body[0] == self.food.position:
                self.snake.grow()
                self.score += self.food.value
                if self.score > self.high_score:
                    self.high_score = self.score
                if eat_sound:
                    eat_sound.play()
                self.food = Food()
            if self.snake.check_collision():
                pygame.mixer.music.stop()
                if game_over_sound:
                    game_over_sound.play()
                self.game_over = True

    def draw_paused(self):
        font = pygame.font.Font(None, 50)
        text = font.render("Paused! Press SPACE to Resume", True, WHITE)
        text_rect = text.get_rect(center=(WIDTH // 2, HEIGHT // 2))
        screen.blit(text, text_rect)

    def draw_game_over(self):
        font = pygame.font.Font(None, 50)
        text = font.render("Game Over! Press R to Restart", True, RED)
        text_rect = text.get_rect(center=(WIDTH // 2, HEIGHT // 2))
        screen.blit(text, text_rect)

    def draw_quit_message(self):
        font = pygame.font.Font(None, 30)  # Smaller font size
        text = font.render("Q", True, RED)  # Display only Q for quit
        text_rect = text.get_rect(topright=(WIDTH - 10, 10))  # Top-right corner
        screen.blit(text, text_rect)

    def draw_score(self):
        font = pygame.font.Font(None, 30)
        score_text = font.render(f"Score: {self.score}  High Score: {self.high_score}", True, WHITE)
        screen.blit(score_text, (10, 10))

    def run(self):
        while self.running:
            self.handle_events()
            self.update()
            screen.fill(BLACK)
            self.snake.draw()
            self.food.draw()
            self.draw_score()

            if self.paused:
                self.draw_paused()
            elif self.game_over:
                self.draw_game_over()

            self.draw_quit_message()  # Show quit message always at top-right

            pygame.display.flip()
            clock.tick(SNAKE_SPEED)

if __name__ == "__main__":
    Game().run()
